// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package sqlite

import (
	"context"
)

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM user
WHERE telegram_id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, telegramID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, telegramID)
	return err
}

const listUsers = `-- name: ListUsers :many
SELECT telegram_id, chat_id FROM user
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.TelegramID, &i.ChatID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveUser = `-- name: SaveUser :one
INSERT INTO user(telegram_id, chat_id)
VALUES(?, ?)
RETURNING telegram_id, chat_id
`

type SaveUserParams struct {
	TelegramID int64
	ChatID     int64
}

func (q *Queries) SaveUser(ctx context.Context, arg SaveUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, saveUser, arg.TelegramID, arg.ChatID)
	var i User
	err := row.Scan(&i.TelegramID, &i.ChatID)
	return i, err
}
